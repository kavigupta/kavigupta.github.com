I"”<p>\(\newcommand{\fcd}{\leadsto}\)</p>

<p>Last time, we discussed funcads, which are a generalization of functions that can have multiple or no values for each element in their input.</p>

<h2 id="composition-of-funcads">Composition of Funcads</h2>

<p>The composition of funcads is defined to be compatible with the composition of functions, and it takes a fairly similar form:</p>

<p>\[f :: Y \fcd Z \wedge f :: X \fcd Y \implies \exists (f \odot g :: X \fcd Z), (f \odot g)(x) = \bigcup_{\forall y \in g(x)} f(y)\]</p>

<p>In other words, map the second function over the result of the first and take the union. If you‚Äôre a Haskell programmer, you probably were expecting this from the title and the name ‚Äúfuncad‚Äù: the funcad composition rule is just Haskell‚Äôs <code>&gt;=&gt;</code>.</p>

<!--end excerpt-->

<p>Anyway, here are a few examples of funcad compositions (originals in blue, red. output in green.):</p>

<h3 id="two-functional-total-funcads">Two functional, total funcads</h3>

<p>These compose like regular functions</p>

<p><img src="/resources/2016-02-16/comp_sq.png" /></p>

<h2 id="composing-a-funcad-with-its-inverse">Composing a funcad with its inverse</h2>

<p>We can represent the operator:</p>

<p>\[\star :: (A \fcd B) \to (A \fcd A)\]
\[\star f = f^{-1} \odot f\]</p>

<h3 id="examples">Examples</h3>

<p>\[f(x) = {x^2}\]</p>

<p><img src="/resources/2016-02-16/pm_.png" /></p>

<p>\[f(x) = \sqrt x\]</p>

<p><img src="/resources/2016-02-16/pos_x.png" /></p>

<p>\[f(x) = \{y | x-1 \leq y \leq x + 1 \}\]
\[f^{-1}(x) = \{y | x \in f(y)\} = \{y | y - 1 \leq x \leq y + 1 \}\]
\[\star f (x) = \{y | y - 1 \leq z \leq y + 1, z \in \{t | x - 1 \leq t \leq x + 1\}\} \]
\[\star f (x) = \{y | y - 1 \leq z \wedge z \leq y + 1, x - 1 \leq z \leq x + 1\} \]
\[\star f (x) = \{y | y \leq z + 1 \wedge z - 1 \leq y, x - 1 \leq z \leq x + 1\} \]
\[\star f (x) = \{y | y \leq x + 2 \wedge x - 2 \leq y\} \]
\[\star f (x) = \{y | x - 2 \leq y \leq x + 2\} \]
<img src="/resources/2016-02-16/large_margin.png" /></p>

<h3 id="general-characterization">General Characterization</h3>

<p>In general, \(\star\) represents the well-behavedness of the given funcad
under under iversion.</p>

<p>We can find that</p>

<p>\[\star f(x) = f^{-1} \odot f (x) = \bigcup_{\forall y \in f(x)} f^{-1}(y)\]
\[\star f (x) = \bigcup_{\forall y \in f(x)} f^{-1}(y)\]</p>

<p>Basically, \(\star f\) represents how one-to-one \(f\) is.</p>

<p>For any isomorphism \(f\), we have \(\star f(x) = x\).</p>

<p>For any one-to-one and functional funcad, we have</p>

<p>\[\star f(x) = \bigcup_{\forall y \in f(x)} f^{-1}(y) = \bigcup_{\forall y \in f(x), |f(x)| = 1, |f^{-1}(y)| = 1} f^{-1}(y)=\left\{\begin{array}{cc} \{x\} &amp; \text{if \(|f(x)| = 1\)}\\ \{\} &amp; \text{otherwise} \end{array}\right.\]</p>

<p>For example, for \(f(t) = \{t^2 - 2t\}, 0 \leq t \leq 1\), \(\star f(t) = t, 0 \leq t \leq 1\):</p>

<p><img src="/resources/2016-02-16/domain_selector.png" /></p>

<p>For a more complex funcad, such as \(f(x) = \pm \sqrt{1-x^2}\), we have
\[\star f(x) = f^{-1}(\sqrt{1 - x^2}) \cup f^{-1}(-\sqrt{1-x^2}) = \pm x, -1 \leq x \leq 1\]</p>

<p><img src="/resources/2016-02-16/circle_to_absval.png" /></p>

<h2 id="a-quick-coding-sample">A Quick Coding Sample</h2>

<p>So, we now know a few things about funcads. How about we put this knowledge into effect?</p>

<p>So, Funcads are Monads, and the typical set-like monad used in Haskell is a list where we don‚Äôt care about order or duplication. Therefore, we can define:</p>

<pre><code class="language-haskell">import Prelude hiding ((.))
import Control.Category

data Funcad a b = Funcad (a -&gt; [b])
instance Category Funcad where
    id = Funcad return
    Funcad a . Funcad b = Funcad $ \x -&gt; b x &gt;&gt;= a
</code></pre>

:ET