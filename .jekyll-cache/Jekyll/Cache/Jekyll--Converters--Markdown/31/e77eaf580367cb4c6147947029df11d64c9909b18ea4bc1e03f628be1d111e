I"‡"<p>The Python interepreter has this convenient feature that when you type something simple onto the interpreter, it spits that value back out at you, so you can copy/paste it back as a value.</p>

<p>But with convenience often comes complexity, letâ€™s look at how this feature works!</p>

<!-- end excerpt -->

<h2 id="how-does-the-print-function-work">How does the print function work?</h2>

<p>Before we can talk about typing stuff onto the interpreter, letâ€™s talk about the simpler function <code>print</code>. Letâ€™s take a look at a few examples:</p>

<pre><code>&gt;&gt;&gt; print('abcdef')
abcdef
&gt;&gt;&gt; print('1')
1
&gt;&gt;&gt; print(1)
1
&gt;&gt;&gt; x = print(1)
1
&gt;&gt;&gt; x
&gt;&gt;&gt;
</code></pre>

<p>So how does <code>print</code> work? Clearly, it returns <code>None</code> once itâ€™s done. But whatâ€™s it doing when itâ€™s printing to the screen. Clearly, something strange is happening where both the string <code>'1'</code> and the number <code>1</code> get printed out as the single character <code>1</code>.</p>

<p>To properly understand print, we need to break it down into its constituent parts. Imagine we have a function <code>print_string</code>, which takes a string and prints it to a terminal. Then, we have the following behavior:</p>

<pre><code>&gt;&gt;&gt; print_string('abcdef')
abcdef
&gt;&gt;&gt; print_string('1')
1
&gt;&gt;&gt; print_string(1)
Error
</code></pre>

<p>Which is somewhat more consistent. We can implement <code>print_string</code> in terms of print fairly easily as follows:</p>

<pre><code class="language-python">def print(x):
    print_string(str(x))
</code></pre>

<p>where <code>str</code> is a function that takes in a value and outputs some string. We have the following behavior for <code>str</code> (illustrated using lists for reasons that will become clear later).</p>

<iframe width="800" height="250" frameborder="0" zoom="0.4" src="https://pythontutor.com/iframe-embed.html#code=x%20%3D%20list%28str%2812%29%29%0Ay%20%3D%20list%28str%28'12'%29%29&amp;codeDivHeight=400&amp;codeDivWidth=350&amp;cumulative=true&amp;curInstr=2&amp;heapPrimitives=nevernest&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false"> </iframe>

<p>In the case of a string, it does nothing, and in the case of an integer, it converts it into a string. Weâ€™ll come back to <code>str</code> later, but for now think of it as providing a nice human-readable version of the given object.</p>

<h2 id="repr"><code>repr</code></h2>

<p>But if we want an output that isnâ€™t human-readable, but is instead computer-readable, we can use <code>repr</code> instead. For example, <code>repr(1)</code> and <code>repr('1')</code> should produce different outputs as they should be read as two different types. Letâ€™s look at some examples:</p>

<pre><code>&gt;&gt;&gt; print_string(repr('abcdef'))
'abcdef'
&gt;&gt;&gt; print_string(repr('1'))
'1'
&gt;&gt;&gt; print_string(repr(1))
1
</code></pre>

<blockquote>
  <p>Note for later: <code>print_string(repr(&lt;blah&gt;))</code> prints out <code>&lt;blah&gt;</code></p>
</blockquote>

<p>Looking at an the same example as before using an environment diagram, we have the same result for <code>repr(12)</code> as <code>str(12)</code> but <code>repr('12')</code> has a set of quotes around it while <code>str('12')</code> does not.</p>

<iframe width="800" height="250" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=x%20%3D%20list%28repr%2812%29%29%0Ay%20%3D%20list%28repr%28'12'%29%29&amp;codeDivHeight=400&amp;codeDivWidth=350&amp;cumulative=true&amp;curInstr=2&amp;heapPrimitives=nevernest&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false"> </iframe>

<p>This difference can be attributed to the fact that typing in <code>12</code> gets us 12, while we need to type in <code>'12'</code> to get <code>'12'</code>, whereas <code>12</code> appropriately represents both concepts to a human reader.</p>

<h2 id="typing-something-into-the-interpreter">Typing something into the interpreter</h2>

<p>In the last section, we saw how the <code>repr</code> function works, especially on strings, where it adds a layer of quotes. You might notice that typing something directly onto the interpreter performs a similar task. Thatâ€™s because it more or less is. We can consider typing something directly into the interpreter (<code>&gt;&gt;&gt; x</code>) to be the same as calling <code>&gt;&gt;&gt; print_string(repr(x))</code>. The examples from above have the same behavior:</p>

<pre><code>&gt;&gt;&gt; 'abcdef'
'abcdef'
&gt;&gt;&gt; '1'
'1'
&gt;&gt;&gt; 1
1
</code></pre>

<p>In fact, this is the motivation behind <code>repr</code>, if you type something into the interpreter, it spits it back out at you.</p>

<h2 id="typing-reprsomething-into-the-interpeter">Typing <code>repr(something)</code> into the interpeter</h2>

<p>Letâ€™s say you did the following:</p>

<pre><code>&gt;&gt;&gt; repr('hi')
"'hi'"
</code></pre>

<p>What happened? We now have two sets of quotes around the <code>hi</code>. Did the <code>repr</code> function add two sets of quotes instead of one? The answer is no, because, as you can recall from the previous section, that example is equivalent to</p>

<pre><code>&gt;&gt;&gt; print_string(repr(repr('hi')))
"'hi'"
</code></pre>

<p>Using our environment diagram, we can see the following:</p>

<iframe width="800" height="250" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=x%20%3D%20list%28repr%28'hi'%29%29%0Ay%20%3D%20list%28repr%28repr%28'hi'%29%29%29&amp;codeDivHeight=400&amp;codeDivWidth=350&amp;cumulative=true&amp;curInstr=2&amp;heapPrimitives=nevernest&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false"> </iframe>

<p>We see that <code>repr('hi')</code> has four characters in it: <code>'</code>, <code>h</code>, <code>i</code>, and <code>'</code>. <code>repr(repr('hi'))</code> needs to represent this, so it has six characters in it: <code>"</code>, <code>'</code>, <code>h</code>, <code>i</code>, <code>'</code>, <code>"</code>. These six characters get printed to the terminal, to form the string <code>"'hi'"</code>.</p>

<h2 id="__str__-and-__repr__"><code>__str__</code> and <code>__repr__</code></h2>

<p>OK, so now that we know that <code>str</code>, <code>repr</code>, <code>print</code>, and typing something directly into the terminal do, letâ€™s look at how these concepts apply to user-defined functions. Take the following class:</p>

<pre><code class="language-python">class A:
    def __repr__(self):
        return "hi"
    def __str__(self):
        return "bye!"
</code></pre>

<p>The idea is that whenever we call <code>str(x)</code> when <code>x</code> is of type <code>A</code>, this is equivalent to calling <code>x.__str__()</code>, and whenever we call <code>repr(x)</code> when <code>x</code> is of type <code>A</code>, this is equivalent to calling <code>x.__repr__()</code>.</p>

<h2 id="examples">Examples</h2>

<p>Here are some examples of how custom <code>__str__</code> and <code>__repr__</code> methods work in practice. Before we get into the explanations, try to figure them out on your own</p>

<pre><code>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a
hi
&gt;&gt;&gt; print(a)
bye!
&gt;&gt;&gt; repr(a)
'hi'
&gt;&gt;&gt; str(a)
'bye!'
</code></pre>

<p>Your first question might be: why no parentheses when we type <code>a</code> into the terminal? The answer is that <code>&gt;&gt;&gt; a</code> is equivalent to <code>print_string(repr(a))</code>, and we have that <code>repr(a)</code> is the string of length 2 containing the letters <code>h</code>, and <code>i</code>; which then gets printed. On the other hand, <code>&gt;&gt;&gt; repr(a)</code> is equivalent to <code>print_string(repr(repr(a)))</code>, and <code>repr(repr(a))</code> is the string of length 4 containing the letters <code>'</code>, <code>h</code>, <code>i</code>, and <code>'</code>. The following environment diagram describes how this process happens:</p>

<iframe width="800" height="500" frameborder="0" src="https://pythontutor.com/iframe-embed.html#code=class%20A%3A%0A%20%20%20%20def%20__repr__%28self%29%3A%0A%20%20%20%20%20%20%20%20return%20%22hi%22%0A%20%20%20%20def%20__str__%28self%29%3A%0A%20%20%20%20%20%20%20%20return%20%22bye!%22%0A%0Aa%20%3D%20A%28%29%0Afirst_line%20%3D%20list%28repr%28a%29%29%0Asecond_line%20%3D%20list%28str%28a%29%29%0Athird_line%20%3D%20list%28repr%28repr%28a%29%29%29%0Afourth_line%20%3D%20list%28repr%28str%28a%29%29%29%0Adel%20a,%20A%20%23%20remove%20extra%20stuff%20from%20environment%20diagram&amp;codeDivHeight=400&amp;codeDivWidth=350&amp;cumulative=false&amp;curInstr=13&amp;heapPrimitives=nevernest&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false"> </iframe>
:ET