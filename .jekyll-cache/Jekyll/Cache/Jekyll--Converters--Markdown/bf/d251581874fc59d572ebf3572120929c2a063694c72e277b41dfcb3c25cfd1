I"^<!--
```haskell
{-# LANGUAGE MultiParamTypeClasses, AllowAmbiguousTypes, FunctionalDependencies #-}
import Prelude hiding(Monoid, (.), (++), id, (^^))
```
-->

<h2 id="two-view-of-monoids">Two View of Monoids.</h2>

<h3 id="monoids">Monoids</h3>

<p>Monoids are defined in Haskell as follows:</p>

<pre><code class="language-haskell">class Monoid a where
    m_id :: a
    (++) :: a -&gt; a -&gt; a
</code></pre>

<p>Monoids define some operation with identity (here called <code>m_id</code>). We can define
the required laws, identity, and associativity, as follows:</p>

<pre><code class="language-haskell">monoidLaw1, monoidLaw2 :: (Monoid a, Eq a) =&gt; a -&gt; Bool
monoidLaw1 x = x ++ m_id == x
monoidLaw2 x = m_id ++ x == x

monoidLaw3 :: (Monoid a, Eq a) =&gt; a -&gt; a -&gt; a -&gt; Bool
monoidLaw3 x y z = (x ++ y) ++ z == x ++ (y ++ z)
</code></pre>
:ET